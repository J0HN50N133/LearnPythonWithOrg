#+TITLE:  LearnPython-WithOrg
#+AUTHOR: JohnsonLee [[mailto:0xjohnsonlee@gmail.com][Email:0xJohnsonlee@gmail.com]]
#+STARTUP: hidestars odd

* 概述
** 标注
BNF 规则([[https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form][巴科斯范式]]):
一种元语言， 符号的规则如下:
| Notation                | Meaning                                                                 |
|-------------------------+-------------------------------------------------------------------------|
| ::=                     | the symbol on the left must be replace with the expression on the right |
| <rule>                  | Must                                                                    |
| [rule]                  | Optional                                                                |
| \vert                       | OR                                                                      |
| *                       | zero or more repetitions                                                |
| +                       | one or more repetiions                                                  |
| "sequence of character" | string                                                                  |
| ...                     | a choice of any single character                                        |
Symbol on the left is the name of the rule.
* 语法介绍
** 变量
** 控制流程
*** 条件
**** if
    #+BEGIN_SRC python :results output :var x = -1
    if x < 0:
        print('x is negative')
    elif x == 0:
        print('x is zero')
    else:
        print('x is postive')
    #+END_SRC

    #+RESULTS:
    : x is negative

*** 循环
**** for
     格式: =for $(itername) in $(iterable object):=
     #+BEGIN_SRC python :results output
     words = ['cat', 'dog', 'chick']
     for w in words:
         print(w, len(w))
     #+END_SRC

     #+RESULTS:
     : ('cat', 3)
     : ('dog', 3)
     : ('chick', 5)

Code that modifies a collection while iterating over that same collection can be tricky 
to get right. Instead, it is usually more straight-forward to loop over a copy of the 
collection or to create a new collection:

#+BEGIN_SRC python
# Strategy:  Iterate over a copy
for user, status in users.copy().items():
    if status == 'inactive':
        del users[user]

# Strategy:  Create a new collection
active_users = {}
for user, status in users.items():
    if status == 'active':
        active_users[user] = status
#+END_SRC

#+BEGIN_SRC python :results output
print(range(5))
#+END_SRC

#+RESULTS:
: [0, 1, 2, 3, 4]

python的for不能直接指定循环多少次, 如何达到指定循环次数的效果
**** range函数
使用格式: range(start, stop[, step])

效果:生成一个从[start, stop)的序列, 序列的步长为c;

返回类型: range

我们可以用range+len来用索引进行循环.
#+BEGIN_SRC python :results output
a = ['Mary', 'had', 'a', 'little', 'lamb']
for i in range(len(a)):
    print(i, a[i])
#+END_SRC

#+RESULTS:
: (0, 'Mary')
: (1, 'had')
: (2, 'a')
: (3, 'little')
: (4, 'lamb')

或者可以使用enumerate()函数
#+BEGIN_SRC python :results output
a = ['Mary', 'had', 'a', 'little', 'lamb']
for i, elem in enumerate(a): # enumerate函数非常类似于golang里的range
    print(i, elem)
#+END_SRC

#+RESULTS:
: (0, 'Mary')
: (1, 'had')
: (2, 'a')
: (3, 'little')
: (4, 'lamb')

**** break, continue, else
     常规的break, continue肯定是有的. else子句比较特别
     #+BEGIN_SRC python :results output
for n in range(2, 10):
    for x in range(2, n):
        if n % x == 0:
            print(n, 'equals', x, '*', n//x)
            break
    else:
        # loop fell through without finding a factor
        print(n, 'is a prime number')
     #+END_SRC
else子句属于for循环, 在for的可循环对象全部循环完毕后, 进入else子句

     #+RESULTS:
     : (2, 'is a prime number')
     : (3, 'is a prime number')
     : (4, 'equals', 2, '*', 2)
     : (5, 'is a prime number')
     : (6, 'equals', 2, '*', 3)
     : (7, 'is a prime number')
     : (8, 'equals', 2, '*', 4)
     : (9, 'equals', 3, '*', 3)

*** pass语句
pass表示一个哑语句
** 函数
*** 定义
用def关键字即可.
格式: def function_name(argument list):, 不需要写函数的返回值类型
#+BEGIN_SRC python :results output
def fib(n):
    """Print a fibonacci series up to n"""
    a, b = 0, 1
    while a < n:
        print(a, end=' ')
	a, b = b, a+b
    print()
fib(10)
#+END_SRC

#+RESULTS:

** 类
